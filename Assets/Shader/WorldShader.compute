#pragma kernel MeshGenerate
#pragma kernel BlockGenerate
#pragma kernel BlockDestroy
#pragma kernel RaycastAtBlock

int CHUCK_SIZE;
int WORLD_SIZE;
int WORLD_HALF_SIZE;
int WORLD_HEIGHT;

RWStructuredBuffer<int> blocksID;

int VIEW_ORIGIN_X;
int VIEW_ORIGIN_Y;
int VIEW_ORIGIN_Z;
int RENDER_DISTANCE;

RWStructuredBuffer<int> counts;

RWStructuredBuffer<float3> meshVs;
RWStructuredBuffer<float2> meshUVs;
RWStructuredBuffer<int> meshTris;

float TEXTURE_BLOCK_TILE_U;
float TEXTURE_BLOCK_TILE_V;

int SOURCE_MESH_BLOCK_FRONT;
int SOURCE_MESH_BLOCK_BACK;
int SOURCE_MESH_BLOCK_LEFT;
int SOURCE_MESH_BLOCK_RIGHT;
int SOURCE_MESH_BLOCK_TOP;
int SOURCE_MESH_BLOCK_BOTTOM;

int SOURCE_MESH_BLOCK_FACE_COUNT;
int SOURCE_MESH_BLOCK_VS_INDEX;
int SOURCE_MESH_BLOCK_TRIS_INDEX;

RWStructuredBuffer<float3> sourceMeshVs;
RWStructuredBuffer<float2> sourceMeshUVs;
RWStructuredBuffer<int> sourceMeshTris;

bool IsInWorldRange(int3 pos)
{
    if (
        pos.x >= 0 && pos.x < WORLD_SIZE &&
        pos.y >= 0 && pos.y < WORLD_HEIGHT &&
        pos.z >= 0 && pos.z < WORLD_SIZE
    ) return true;
    else return false;
}

int CheckIsAir(int3 pos)
{
    if (IsInWorldRange(pos))
    {
        if (blocksID[pos.x + pos.y * WORLD_SIZE + pos.z * WORLD_HEIGHT * WORLD_SIZE] == 0)
        {
            return 1;
        }
        
    }

    return 0;
}

float3 ToCoordsIntConvert(int3 pos)
{
    return float3((float)pos.x - WORLD_HALF_SIZE, (float)pos.y, (float)pos.z - WORLD_HALF_SIZE);
}

float2 GetUVFromID(int blockID)
{
    float2 rtValue = float2
    (
        (blockID - 1) % 5 * TEXTURE_BLOCK_TILE_U, 
        (int)((blockID - 1) / 5) * TEXTURE_BLOCK_TILE_V
    );

    return rtValue;
}

[numthreads(8,8,8)]
void MeshGenerate (uint3 id : SV_DispatchThreadID)
{
    int3 voxel = int3(id.x + VIEW_ORIGIN_X, id.y + VIEW_ORIGIN_Y, id.z + VIEW_ORIGIN_Z);
    int index = voxel.x + voxel.y * WORLD_SIZE + voxel.z * WORLD_HEIGHT * WORLD_SIZE;

    // ブロックが描画範囲でかつ、空気ブロックでない場合処理を行う
    if (blocksID[index] != 0)
    {
        // 上下左右前後の6方向をチェック
        int isTopNeedDraw = CheckIsAir(voxel + int3(0, 1, 0));
        int isBottomNeedDraw = CheckIsAir(voxel + int3(0, -1, 0));
        int isLeftNeedDraw = CheckIsAir(voxel + int3(-1, 0, 0));
        int isRightNeedDraw = CheckIsAir(voxel + int3(1, 0, 0));
        int isFrontNeedDraw = CheckIsAir(voxel + int3(0, 0, -1));
        int isBackNeedDraw = CheckIsAir(voxel + int3(0, 0, 1));

        // どれか一つでも空気ブロックがあれば描画対象とする
        int isNeedDraw = isTopNeedDraw + isBottomNeedDraw + isLeftNeedDraw + isRightNeedDraw + isFrontNeedDraw + isBackNeedDraw;

        // 描画対象のブロック情報を格納
        if (isNeedDraw > 0)
        {
            InterlockedAdd(counts[0], 1);

            int thisVsIndex;
            InterlockedAdd(counts[1], isNeedDraw * 4, thisVsIndex);

            int thisTrisIndex;
            InterlockedAdd(counts[2], isNeedDraw * 6, thisTrisIndex);

            int vsIndex = thisVsIndex;
            int trisIndex = thisTrisIndex;
            for (int i = 0; i < SOURCE_MESH_BLOCK_FACE_COUNT; i++)
            {
                int nowDrawing = 0;
                if (i == 0) nowDrawing = isFrontNeedDraw;
                else if (i == 1) nowDrawing = isBackNeedDraw;
                else if (i == 2) nowDrawing = isLeftNeedDraw;
                else if (i == 3) nowDrawing = isRightNeedDraw;
                else if (i == 4) nowDrawing = isTopNeedDraw;
                else if (i == 5) nowDrawing = isBottomNeedDraw;

                if (nowDrawing == 1)
                {
                    // ブロックの座標を変換
                    float3 blockCoords = ToCoordsIntConvert(voxel);

                    for (int j = 0; j < 4; j++)
                    {
                        meshVs[vsIndex] = 
                        sourceMeshVs[SOURCE_MESH_BLOCK_VS_INDEX + i * 4 + j] + 
                        float3(blockCoords.x, blockCoords.y, blockCoords.z);

                        float2 uvDiff = GetUVFromID(blocksID[index]);

                        meshUVs[vsIndex] = sourceMeshUVs[SOURCE_MESH_BLOCK_VS_INDEX + i * 4 + j] + uvDiff;

                        vsIndex++;
                    }

                    for (int j = 0; j < 6; j++)
                    {
                        meshTris[trisIndex] = thisVsIndex + sourceMeshTris[SOURCE_MESH_BLOCK_TRIS_INDEX + i * 6 + j];
                        trisIndex++;
                    }

                    thisVsIndex += 4;
                }
            }
        }
    }
}

[numthreads(1,1,1)]
void BlockGenerate (uint3 id : SV_DispatchThreadID)
{
}

[numthreads(1,1,1)]
void BlockDestroy (uint3 id : SV_DispatchThreadID)
{
}

float RAY_SIZE;
float RAY_ORIGIN_X;
float RAY_ORIGIN_Y;
float RAY_ORIGIN_Z;

float RAY_DIRECTION_X;
float RAY_DIRECTION_Y;
float RAY_DIRECTION_Z;

float RAY_LENGTH;

RWStructuredBuffer<float4> raycastBlocks;

[numthreads(8,1,1)]
void RaycastAtBlock (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;

    float3 rayPos;
    rayPos.x = RAY_ORIGIN_X + (RAY_DIRECTION_X * RAY_LENGTH) * ((float)index / (float)RAY_SIZE);
    rayPos.y = RAY_ORIGIN_Y + (RAY_DIRECTION_Y * RAY_LENGTH) * ((float)index / (float)RAY_SIZE);
    rayPos.z = RAY_ORIGIN_Z + (RAY_DIRECTION_Z * RAY_LENGTH) * ((float)index / (float)RAY_SIZE);

    int3 blockPos = int3(rayPos);
    float3 rayFloatPart = rayPos - float3(int3(rayPos));
    
    if (rayFloatPart.x >= 0.5) blockPos.x += 1;
    // if (rayFloatPart.y >= 0.5) blockPos.y += 1;
    if (rayFloatPart.z >= 0.5) blockPos.z += 1;

    raycastBlocks[index].x = blockPos.x;
    raycastBlocks[index].y = blockPos.y;
    raycastBlocks[index].z = blockPos.z;
    raycastBlocks[index].w = blocksID[blockPos.x + blockPos.y * WORLD_SIZE + blockPos.z * WORLD_HEIGHT * WORLD_SIZE];
}
